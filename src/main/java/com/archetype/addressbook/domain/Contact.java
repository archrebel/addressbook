/*
* This code has been generated by the Rebel: a code generator for modern Java.
* 
* For more details, please visit www.archetypesoftware.com.
*
* Drop us a line or two at feedback@archetypesoftware.com. We would love to hear from you.
*/
package com.archetype.addressbook.domain;

import java.util.*;
import java.time.*;

import javax.persistence.*;
import javax.validation.constraints.*;
import com.fasterxml.jackson.annotation.*;


// ----------- << imports@AAAAAAFrhExAeE6gAR0= >>
// ----------- >>

/**
* There could be very different ways to contact persons. 
* 
* For instance, we can make phone calls, send e-mails or send postcards to their home or work addresses. 
* 
* The Contact is the base concept for all of these.
*/

@Entity
@Inheritance(strategy = InheritanceType.JOINED)
@JsonTypeInfo(
		use = JsonTypeInfo.Id.NAME,
		property = "type"
)
@JsonSubTypes({
		@JsonSubTypes.Type(value = Phone.class, name = "phone"),
		@JsonSubTypes.Type(value = Email.class, name = "email"),
		@JsonSubTypes.Type(value = Address.class, name = "address"),
		@JsonSubTypes.Type(value = Website.class, name = "website"),
		@JsonSubTypes.Type(value = InstantMessenger.class, name = "instantMessenger")
})
// ----------- << class.annotations@AAAAAAFrhExAeE6gAR0= >>
// ----------- >>
public class Contact {
	@Id
	@GeneratedValue(strategy = GenerationType.AUTO)
	// ----------- << id.annotations@AAAAAAFrhExAeE6gAR0= >>
	@JsonIgnore
	// ----------- >>
	private Long id;

	/**
	* Each contact can be further qualified. For example, phone can be mobile, work, home, workFax or homeFax. Address can be at home, at work or other, etc.
	*/

	@Enumerated(EnumType.STRING)
	@NotNull
	@Column(nullable = false)
	// ----------- << attribute.annotations@AAAAAAFrhFMEw0/N35M= >>
	// ----------- >>
	private ContactCategory category;

	// ----------- << getId.annotations@AAAAAAFrhExAeE6gAR0= >>
	// ----------- >>
	public Long getId(){
		return id;
	}

	public ContactCategory getCategory() {
		return category;
	}

	public Contact setCategory(ContactCategory category) {
		this.category = category;
		return this;
	}

	// ----------- << equals.annotations@AAAAAAFrhExAeE6gAR0= >>
	// ----------- >>
	@Override
	public boolean equals(Object obj) {
		if (super.equals(obj)) return true;
		if (getId() == null) return false;
		return obj instanceof Contact && (getId().equals(((Contact) obj).getId()));
	}

	// ----------- << hashCode.annotations@AAAAAAFrhExAeE6gAR0= >>
	// ----------- >>
	@Override
	public int hashCode() {
		return 175;
	}

// ----------- << class.extras@AAAAAAFrhExAeE6gAR0= >>

	protected Contact() {
		this.category = ContactCategory.other;
	}

// ----------- >>
}